var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = ReverseGeocode","category":"page"},{"location":"#ReverseGeocode","page":"Home","title":"ReverseGeocode","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [ReverseGeocode]","category":"page"},{"location":"#ReverseGeocode.COLUMNS","page":"Home","title":"ReverseGeocode.COLUMNS","text":"''' Column names in the geonames dumpfile (from http://download.geonames.org/export/dump): –––––––––––––––––––––––––- geonameid         : integer id of record in geonames database name              : name of geographical point (utf8) varchar(200) asciiname         : name of geographical point in plain ascii characters, varchar(200) alternatenames    : alternatenames, comma separated, ascii names automatically transliterated, convenience attribute from alternatename table, varchar(10000) latitude          : latitude in decimal degrees (wgs84) longitude         : longitude in decimal degrees (wgs84) feature class     : see http://www.geonames.org/export/codes.html, char(1) feature code      : see http://www.geonames.org/export/codes.html, varchar(10) country code      : ISO-3166 2-letter country code, 2 characters cc2               : alternate country codes, comma separated, ISO-3166 2-letter country code, 200 characters admin1 code       : fipscode (subject to change to iso code), see exceptions below, see file admin1Codes.txt for display names of this code; varchar(20) admin2 code       : code for the second administrative division, a county in the US, see file admin2Codes.txt; varchar(80)  admin3 code       : code for third level administrative division, varchar(20) admin4 code       : code for fourth level administrative division, varchar(20) population        : bigint (8 byte int)  elevation         : in meters, integer dem               : digital elevation model, srtm3 or gtopo30, average elevation of 3''x3'' (ca 90mx90m) or 30''x30'' (ca 900mx900m) area in meters, integer. srtm processed by cgiar/ciat. timezone          : the iana timezone id (see file timeZone.txt) varchar(40) modification date : date of last modification in yyyy-MM-dd format] '''\n\n\n\n\n\n","category":"constant"},{"location":"#ReverseGeocode.Geocoder","page":"Home","title":"ReverseGeocode.Geocoder","text":"Geocoder(;data_dir=\"./data\", geo_file=\"cities1000\"))\n\nGeocoder structure that holds the reference points and their labels.\n\n\n\n\n\n","category":"type"},{"location":"#ReverseGeocode.decode-Tuple{Geocoder,AbstractArray{var\"#s18\",1} where var\"#s18\"<:Real}","page":"Home","title":"ReverseGeocode.decode","text":"decode(gc::Geocoder, point) => Tuple(String, String)\n\nDecode for single points. If processing many points, it should be faster with decode(gc, points) than with this function. \n\n\n\n\n\n","category":"method"},{"location":"#ReverseGeocode.decode-Tuple{Geocoder,Union{AbstractArray{var\"#s12\",N} where N where var\"#s12\"<:(AbstractArray{var\"#s18\",1} where var\"#s18\"<:Real), AbstractArray{var\"#s19\",2} where var\"#s19\"<:Real}}","page":"Home","title":"ReverseGeocode.decode","text":"decode(gc::Geocoder, points)=> Array{Tuple{String, String}}\n\nReturn country name and city for collection of points. Points should be either an array of staticaly sized arrays  (e.g. StaticArrays) or a Matrix (see NearestNeighbors.jl documentation for details). \n\nThe country and city is determined by the nearest neighbor search in the labelled list of city locations from geonames.org. As such, the results may not be exactly accurate (e.g searches for points close to borders or in the middle of nowhere).\n\nNearest neighbor search uses the euclidian metric in the space of lat/lon coordinates. \n\n# Example\njulia> gc = Geocoder();\njulia> ReverseGeocode.decode(gc, [SA[49.5863897, 17.2627342], SA[63.3342550, 12.0280064]])\n2-element Array{Tuple{String,String},1}:\n (\"Czechia\", \"CZ\", \"Olomouc\")\n (\"Norway\", \"NO\", \"Meråker\")\n\n\n\n\n\n","category":"method"},{"location":"#ReverseGeocode.download_country_codes-Tuple{}","page":"Home","title":"ReverseGeocode.download_country_codes","text":"Download and resave the country codes csv from geonames.\n\n\n\n\n\n","category":"method"},{"location":"#ReverseGeocode.download_data-Tuple{}","page":"Home","title":"ReverseGeocode.download_data","text":"download_data(;data_dir=\"./data\", geo_file=\"cities1000\", header=COLUMNS)\n\nDownload dump from geonames.org. This function  fetches a file of all cities with a population > 1000 (other options are 500,5000,15000) (or  seats of admin div). The dump is unpacked and city name, coordinates and country code are resaved  in a csv file for use in the Geocoder. \n\n\n\n\n\n","category":"method"},{"location":"#ReverseGeocode.read_data-Tuple{}","page":"Home","title":"ReverseGeocode.read_data","text":"read_data(;data_dir=\"./data\", geo_file=\"cities1000\")\n\nLoad coordinates, countrycodes and city names from the csv export of the geonames file. Make sure to call downloaddata() before read_data().\n\n\n\n\n\n","category":"method"}]
}
