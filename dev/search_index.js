var documenterSearchIndex = {"docs":
[{"location":"future_plans/#Future-plans","page":"Future plans","title":"Future plans","text":"","category":"section"},{"location":"future_plans/#Improve-the-accuracy-of-labelling","page":"Future plans","title":"Improve the accuracy of labelling","text":"","category":"section"},{"location":"future_plans/","page":"Future plans","title":"Future plans","text":"The package intrinsically provides only approximate tags for locations. There seems to be more than one sources of errors:","category":"page"},{"location":"future_plans/","page":"Future plans","title":"Future plans","text":"the labelled point is closer to reference point in another country, district, ... than to the correct reference point. \nthe labelled point is closer to the correct reference point using the real (Haversine) distance, but since the method uses euclidian distance on lat/lon coordinates, it could come out closer to an incorrect reference point. ","category":"page"},{"location":"future_plans/","page":"Future plans","title":"Future plans","text":"The first point is difficult to fix without using polygons for districts and countries. The second point could be easily fixed by using a haversine formula (probably an overkill) or simply compensating for the different lat/lon degree length (WE degrees have different length at different lattitudes) with simple cosine formula. To implement this, I would like to gather a test dataset first to determine whether the more complex calculation is worth the effort. Some reported inaccuracies can be found here.","category":"page"},{"location":"future_plans/#Change-installation-and-usage","page":"Future plans","title":"Change installation and usage","text":"","category":"section"},{"location":"future_plans/","page":"Future plans","title":"Future plans","text":"Right now, the database of reference points is downloaded upon first use of Geocoder. I think it would be better to add a build step to the installation in which the database would get downloaded and preprocessed. ","category":"page"},{"location":"future_plans/#Add-more-optional-administrative-units-to-the-output","page":"Future plans","title":"Add more optional administrative units to the output","text":"","category":"section"},{"location":"future_plans/","page":"Future plans","title":"Future plans","text":"This should be easy since all the data is already there","category":"page"},{"location":"future_plans/#Allow-user-defined-inputs","page":"Future plans","title":"Allow user defined inputs","text":"","category":"section"},{"location":"future_plans/","page":"Future plans","title":"Future plans","text":"This should be easy as well since all the functions take kwarg with a path to the database file.","category":"page"},{"location":"future_plans/#Optionally-return-distance-with-the-returned-values","page":"Future plans","title":"Optionally return distance with the returned values","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"CurrentModule = ReverseGeocode","category":"page"},{"location":"#ReverseGeocode","page":"Home","title":"ReverseGeocode","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Julia package for fast offline reverse geocoding. ","category":"page"},{"location":"#Table-of-contents","page":"Home","title":"Table of contents","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Depth=2","category":"page"},{"location":"","page":"Home","title":"Home","text":"The tool returns city and country closest to provided latitude/longitude coordinate (WGS84).","category":"page"},{"location":"#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"In REPL, simply run ","category":"page"},{"location":"","page":"Home","title":"Home","text":"import Pkg; Pkg.add(\"ReverseGeocode\")","category":"page"},{"location":"","page":"Home","title":"Home","text":"to install the package. ","category":"page"},{"location":"","page":"Home","title":"Home","text":"The reference dataset is download on the first use. To download the data, simply run","category":"page"},{"location":"","page":"Home","title":"Home","text":"using ReverseGeocode\nGeocoder()","category":"page"},{"location":"#Usage-example:","page":"Home","title":"Usage example:","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"The decode function works with either single lat/lon point or with an array of points or a Matrix. Lat/lon are assumed to be decimal degrees (WGS84).","category":"page"},{"location":"","page":"Home","title":"Home","text":"using ReverseGeocode, StaticArrays \n\ngc = Geocoder()\n\n# single coordinate\ndecode(gc, SA[51.45,0.00])\n#(country = \"United Kingdom\", country_code = \"GB\", city = \"Blackheath\")\n\n# multiple coordinates\ndecode(gc, [[34.2,100.00] [50.01,16.35]])\n#2-element Array{NamedTuple{(:country, :country_code, :city),Tuple{String,String,String}},1}:\n# (country = \"China\", country_code = \"CN\", city = \"Kequ\")\n# (country = \"Czechia\", country_code = \"CZ\", city = \"Ústí nad Orlicí\")","category":"page"},{"location":"","page":"Home","title":"Home","text":"Note that due to the requirements of the NearestNeighbors library, the dimension of points needs to be set at type level, so use of either StaticArrays or Matrices for input data is recommended. ","category":"page"},{"location":"#Description","page":"Home","title":"Description","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"The package works by searching for the nearest neighbor in the downloaded list of known locations from geonames.org. ","category":"page"},{"location":"","page":"Home","title":"Home","text":"As such, it is extremely fast compared to online APIs. This makes it useful for quickly annotating large numbers of points. Additionally, as the labelling runs locally, it can not exhaust limits of free web APIs.","category":"page"},{"location":"#Limitations","page":"Home","title":"Limitations","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Since the reverse geocoding is performed simply by finding the nearest labelled point, the labelling may not return accurate annotations for some points (e.g. points close to borders of two cities or countries may be mislabelled). ","category":"page"},{"location":"#Acknowledgmenets","page":"Home","title":"Acknowledgmenets","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Inspired by the python package reverse_geocode\nData from geonames.org under Creative Commons Attribution 4.0 License","category":"page"},{"location":"docstrings/#Methods-and-structures","page":"Methods and structures","title":"Methods and structures","text":"","category":"section"},{"location":"docstrings/","page":"Methods and structures","title":"Methods and structures","text":"","category":"page"},{"location":"docstrings/","page":"Methods and structures","title":"Methods and structures","text":"Modules = [ReverseGeocode]","category":"page"},{"location":"docstrings/#ReverseGeocode.Geocoder","page":"Methods and structures","title":"ReverseGeocode.Geocoder","text":"Geocoder(cities_data::AbstractDataFrame; filters::Vector{Function} = Function[])\nGeocoder(;data_dir::String=DATA_DIR, geo_file::String=GEO_FILE, filters::Vector{Function} = Function[])\n\nGeocoder structure that holds the reference points and their labels (city name and country code).\n\n\n\n\n\n","category":"type"},{"location":"docstrings/#ReverseGeocode.decode-Tuple{Geocoder, AbstractVector{var\"#s30\"} where var\"#s30\"<:Real}","page":"Methods and structures","title":"ReverseGeocode.decode","text":"decode(gc::Geocoder, point) => NamedTuple{(:country, :country_code, :city), Tuple{String, String, String}}\n\nDecode for single point. If processing many points, preferably use decode(gc, points) instead of using this method in a loop. \n\n\n\n\n\n","category":"method"},{"location":"docstrings/#ReverseGeocode.decode-Tuple{Geocoder, Union{AbstractMatrix{var\"#s31\"} where var\"#s31\"<:Real, AbstractVector{var\"#s3\"} where var\"#s3\"<:(AbstractVector{var\"#s2\"} where var\"#s2\"<:Real)}}","page":"Methods and structures","title":"ReverseGeocode.decode","text":"decode(gc::Geocoder, points) => Array{NamedTuple{(:country, :country_code, :city), Tuple{String, String, String}}}\n\nReturn country name and city for collection of points. Points should be either an array of staticaly sized arrays  (e.g. StaticArrays) or a Matrix (see NearestNeighbors.jl documentation for details). \n\nThe country and city is determined by the nearest neighbor search in the labelled list of city locations from geonames.org. As such, the results may not be exactly accurate (e.g searches for points close to borders or in the middle of nowhere).\n\nNearest neighbor search uses the euclidian metric in the space of lat/lon coordinates. \n\n# Example\njulia> gc = Geocoder();\njulia> ReverseGeocode.decode(gc, [SA[49.5863897, 17.2627342], SA[63.3342550, 12.0280064]])\n2-element Array{Tuple{String,String},1}:\n (country=\"Czechia\", country_code=\"CZ\", city=\"Olomouc\")\n (country=\"Norway\", country_code=\"NO\", city=\"Meråker\")\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#ReverseGeocode.download_country_codes-Tuple{}","page":"Methods and structures","title":"ReverseGeocode.download_country_codes","text":"Download and resave the country codes csv from geonames.  Country codes are part of the package so this function does not usually need to run during install. \n\n\n\n\n\n","category":"method"},{"location":"docstrings/#ReverseGeocode.download_data-Tuple{}","page":"Methods and structures","title":"ReverseGeocode.download_data","text":"download_data(;data_dir=\"./data\", geo_file=\"cities1000\", header=COLUMNS)\n\nDownload dump from geonames.org. This function  fetches a file of cities with a population > 1000 (and seats of administrations of ceratain country subdivisions,  other options are population 500, 5000, 15000, see geonames.org for details).  The dump is unpacked and city name, coordinates and country code are saved  in a .csv file for use in the Geocoder. \n\n\n\n\n\n","category":"method"},{"location":"docstrings/#ReverseGeocode.read_data-Tuple{}","page":"Methods and structures","title":"ReverseGeocode.read_data","text":"read_data(;data_dir=\"./data\", geo_file=\"cities1000\")\n\nLoad coordinates, country codes and city names from the .csv saved export of the geonames file. Make sure to call download_data() before read_data().\n\n\n\n\n\n","category":"method"}]
}
