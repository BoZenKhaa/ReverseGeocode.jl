var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = ReverseGeocode","category":"page"},{"location":"#ReverseGeocode","page":"Home","title":"ReverseGeocode","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [ReverseGeocode]","category":"page"},{"location":"#ReverseGeocode.COLUMNS","page":"Home","title":"ReverseGeocode.COLUMNS","text":"Column names in the geonames dumpfile (from http://download.geonames.org/export/dump):\n\n\n\n\n\n","category":"constant"},{"location":"#ReverseGeocode.Geocoder","page":"Home","title":"ReverseGeocode.Geocoder","text":"Geocoder(;data_dir=\"./data\", geo_file=\"cities1000\"))\n\nGeocoder structure that holds the reference points and their labels.\n\n\n\n\n\n","category":"type"},{"location":"#ReverseGeocode.decode-Tuple{Geocoder,AbstractArray{var\"#s18\",1} where var\"#s18\"<:Real}","page":"Home","title":"ReverseGeocode.decode","text":"decode(gc::Geocoder, point) => NamedTuple{(:country, :country_code, :city), Tuple{String, String, String}}\n\nDecode for single point. If processing many points, it should be faster with decode(gc, points) than with this function. \n\n\n\n\n\n","category":"method"},{"location":"#ReverseGeocode.decode-Tuple{Geocoder,Union{AbstractArray{var\"#s12\",N} where N where var\"#s12\"<:(AbstractArray{var\"#s18\",1} where var\"#s18\"<:Real), AbstractArray{var\"#s19\",2} where var\"#s19\"<:Real}}","page":"Home","title":"ReverseGeocode.decode","text":"decode(gc::Geocoder, points) => Array{NamedTuple{(:country, :country_code, :city), Tuple{String, String, String}}}\n\nReturn country name and city for collection of points. Points should be either an array of staticaly sized arrays  (e.g. StaticArrays) or a Matrix (see NearestNeighbors.jl documentation for details). \n\nThe country and city is determined by the nearest neighbor search in the labelled list of city locations from geonames.org. As such, the results may not be exactly accurate (e.g searches for points close to borders or in the middle of nowhere).\n\nNearest neighbor search uses the euclidian metric in the space of lat/lon coordinates. \n\n# Example\njulia> gc = Geocoder();\njulia> ReverseGeocode.decode(gc, [SA[49.5863897, 17.2627342], SA[63.3342550, 12.0280064]])\n2-element Array{Tuple{String,String},1}:\n (country=\"Czechia\", country_code=\"CZ\", city=\"Olomouc\")\n (country=\"Norway\", country_code=\"NO\", city=\"MerÃ¥ker\")\n\n\n\n\n\n","category":"method"},{"location":"#ReverseGeocode.download_country_codes-Tuple{}","page":"Home","title":"ReverseGeocode.download_country_codes","text":"Download and resave the country codes csv from geonames.\n\n\n\n\n\n","category":"method"},{"location":"#ReverseGeocode.download_data-Tuple{}","page":"Home","title":"ReverseGeocode.download_data","text":"download_data(;data_dir=\"./data\", geo_file=\"cities1000\", header=COLUMNS)\n\nDownload dump from geonames.org. This function  fetches a file of all cities with a population > 1000 (other options are 500,5000,15000) (or  seats of admin div). The dump is unpacked and city name, coordinates and country code are resaved  in a csv file for use in the Geocoder. \n\n\n\n\n\n","category":"method"},{"location":"#ReverseGeocode.read_data-Tuple{}","page":"Home","title":"ReverseGeocode.read_data","text":"read_data(;data_dir=\"./data\", geo_file=\"cities1000\")\n\nLoad coordinates, countrycodes and city names from the csv export of the geonames file. Make sure to call downloaddata() before read_data().\n\n\n\n\n\n","category":"method"}]
}
